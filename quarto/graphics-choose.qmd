---
title: "Graphics: Choose a Graph Type"
author: "Stacy DeRuiter"
date: "last-modified"
output: webexercises::webexercises_default
toc: true
---

```{r}
#| setup: true
#| include: false

library(tidyverse)
library(ggformula)
library(gganimate)
library(ggforce)
library(webexercises)

theme_set(theme_void(base_size = 20))
knitr::opts_chunk$set(
  echo = FALSE,
  fig.align = "center",
  fig.width = 6, fig.height = 2.5)

crime <- read_csv('https://sldr.netlify.app/data/sscrime.csv')
```


## Section Learning Outcomes

After this tutorial, you will:

1. Distinguish variable types: quantitative, categorical (nominal, ordinal, interval, ratio); explanatory, response, covariate.
2. Choose an appropriate graphical display for a specified combination of variables.
3. (Continue to) critique statistical graphics based on design principles.

**Note: You do NOT have to memorize all the information in this tutorial. Review it now, but know you will probably return to this tutorial for later reference. Your goal should be to finish with a basic idea of which graph types should be used for which variable types. Notice that the "Gallery" sections in the navigation bar are labeled by which variable types are to be shown!**

At the end, you might want to finish with your own notes filling in a table like the one below:

```{r, echo = FALSE}
knitr::kable(tibble::tibble(Variables = c('One Quantitative', 'One Categorical', '...'),
                            Graphs = c(' histogram, density plot, ...', '...', '...')))
```

## Text Reference

- [*Beyond Multiple Linear Regression* Ch. 1.5](https://bookdown.org/roback/bookdown-BeyondMLR/ch-MLRreview.html#explorech1){target="_blank"}
- *Ecological Models & Data in R* Ch. 2 discusses graphics, but  is not recommended as the approach to reading in data, writing R code, and generating graphs in R is very different to that used in this course.
- A comprehensive, and free, supplemental reference is [Fundamentals of Data Visualization by Claus Wilke](https://clauswilke.com/dataviz/){target="_blank"}



## Motivation: Imagine First!
Figures are a crucial tool for exploring your data *and* communicating what you learn from the data.

Whether you are doing a quick check to assess basic features of a dataset or creating a key figure for an important presentation, the best practice is to work thoughtfully. You already learned about creating graphics by I.C.E.E:

### The **I.C.E.E. method**: 

- **I***magine* how you want your graph to look, *before* you 
- **C***ode*. Once you have the basic starting point, 
- **E***valuate* your work, and
- **E***laborate* (refine it).

Repeat until the figure is as awesome as it needs to be.

### Limiting Your Imagination
There is really no limit to the creative data visualizations you might dream up.

But there is a set of basic, workhorse graphics that statisticians and data scientists use most frequently. What are the common options and how do you choose among them?

The best choice depends on what kind of data you have, and also on what you want to do with it: what question are your trying to answer? What story will you tell?

## Goals

Specifically, you will now focus on **choosing the right type of visualization for the task at hand.**

Note that the graphs shown in this tutorial are over-simplified versions - icons, really - with missing labels, huge titles, and huge data elements. This is intentional, to evoke the look of each plot type rather than to present actual data.

## Variable Types
Before designing a graphic, you need some data. Ideally, it will be in a tidy table, with one row per case and one column per variable.

Different plots may be appropriate, depending on whether the variable is:

- *Categorical* (either nominal or ordinal) or 
- *Quantitative* (interval or ratio)
- Beware categorical variables that are stored using numeric codes: they are still categorical!
- *Note:* Variables that take on discrete numeric values can be treated as either, depending mainly on whether there are a lot of possible values (treat like numeric) or few (treat like categorical)
- Other courses or disciplines may distinguish carefully between ordinal and nominal data. We often won't, since we don't learn distinct methods for them, but treat both as *categorical*.

The video below gives a concise explanation of the different variable types you need to be able to recognize.

{{< video https://youtu.be/eghn__C7JLQ?si=Oozu0Z6p4xTBh64z >}}


## DISTRIBUTIONS
Sometimes, you need a plot that lets you *see* the **distribution** of a single variable: 

- What *values* does it take on?
- How *often* does each value occur?

Sometimes these graphs present the answer to a scientific question of interest, but often they are used during exploration or model assessment to better understand a dataset and:

- Check the data 
  - Are there lots of missing values? 
  - Are missing values encoded as 999 or -1000 or some other impossible value instead of being marked as "NA"?
- Verify whether the variable's distribution matches expectations (for example, symmetry, etc.)

## Gallery: One Categorical Variable

### Consider your Audience
To show one categorical variable, we will mainly use bar charts. You might also consider lollipop/Cleveland dot plots, or pie graphs.

```{r, fig.alt='A table showing features and benefits of different graph types for one categorical variable, highlighting statisticians bias against pie charts', out.width='80%'}
# one_cat <- tibble(Graph = c('Bar', 
#                             'Lollipop',
#                             'Cleveland Dot',
#                             #'waffle',
#                             'Pie'),
#                   `Show Proportions?` = sapply(c('white_check_mark', 
#                                                #'white_check_mark', 
#                                                'white_check_mark', 
#                                                'white_check_mark', 
#                                                'white_check_mark'), 
#                                              emo::ji),
#                   `Show Counts?` = sapply(c('white_check_mark',
#                                             'white_check_mark',
#                                             'white_check_mark', 
#                                          # 'x', 
#                                           'x'),
#                                         emo::ji),
#                   Statisticians = sapply(c('heart_eyes', 
#                                             #'sunglasses', 
#                                             'sunglasses',
#                                            'sunglasses',
#                                            'rage'),
#                                          emo::ji)
#                   )
# 
#
# knitr::kable(one_cat)
knitr::include_graphics('images/one-cat-emojis.png')
```

### Bar Graph

```{r, echo = FALSE, fig.alt="a bar chart (generic and unlabelled, serving as an icon)"}
gf_bar(~Location, data = crime) |>
  gf_labs(title = 'BAR')
```

- Can show either counts, proportions, or percentages
- Easy to see which categories have more/fewer observations

<!-- ### Waffle Charts -->

<!-- ```{r, echo = FALSE} -->
<!-- my_waffle <- function(factor, nrow, ncol){ -->

<!-- } -->
<!-- ``` -->

<!-- - Show a set number of icons, *not* necessarily the same as number of observations -->
<!-- - More playful, less serious -->
<!-- - Well-chosen icons can tell a memorable story -->

### Cleveland Dot Plot

```{r, cleveland, echo = FALSE, message = FALSE, fig.alt = 'a cleveland dotplot (generic and unlabelled, serving as an icon)'}
loc <- crime |>
  group_by(Location) |>
  summarize(n = n(), freq = n / nrow(crime)) |>
  mutate(Location = forcats::fct_reorder(factor(Location), n))

gf_point(Location ~ n, data = loc,
         size = 10) |>
  gf_lims(x = c(0, 1.1*max(loc$n))) |>
  gf_labs(title = 'CLEVELAND DOT') |>
  gf_theme(panel.grid.major.y = element_line(color = 'grey70'),
           panel.grid.major.x = element_blank(),
           panel.grid.minor.x = element_blank(),
          axis.line = element_line(color = 'black', linewidth = 3))
```

```{r, lollipop, echo = FALSE, message = FALSE, fig.alt = 'a lollipop chart (generic and unlabelled, serving as an icon)'}
gf_point(Location ~ n, data = loc,
         size = 10) |>
  gf_segment(Location + Location ~ 0 + n,
             color = 'black', linewidth = 2) |>
  gf_labs(title = 'LOLLIPOP') |>
  gf_theme(panel.grid.major.y = element_line(color = 'grey70'),
           panel.grid.major.x = element_blank(),
           panel.grid.minor.x = element_blank(),
            axis.line = element_line(color = 'black', linewidth = 3))

```

- Main difference is whether the "sticks" are drawn (Lollipop) or not (Cleveland Dot)
- Much like a bar chart, but using dots or lollipops to mark the count or proportion in each category
- Work well when there are many categories to be ranked by frequency

### Pie Chart


```{r, echo = FALSE, message = FALSE, fig.alt = 'a pie chart (generic and unlabelled, serving as an icon)'}
gf_bar(~1, fill = ~Location, data = crime, width = 1) |>
  gf_refine(coord_polar('y')) |>
  gf_theme(legend.position = 'none') |>
  gf_labs(title = 'PIE') |>
  gf_refine(scale_fill_brewer(palette = 'Greys'))
```


- Display proportions, not counts
- Unpopular with many statisticians and data scientists because...
  - Hard to see which categories have more/fewer observation when proportions similar
  - Temptation to clutter them up with annotation (for example, percentage for each slice)
  - Can be inefficient use of space on rectangular page
- Often easier to interpret when there are few categories

## Gallery: One Quantitative Variable

### Dotplot


```{r, message = FALSE, warning = FALSE, fig.alt = 'a dotplot (generic and unlabelled, serving as an icon)'}
set.seed(124)
gf_dotplot(~TrainingHours, data = mosaic::sample(crime, size = 25, replace = TRUE), 
           method = 'histodot', binwidth = 0.25) |>
  gf_labs(title = 'DOTPLOT') |>
  gf_theme(#panel.grid.major.y = element_line(color = 'grey70'),
           #panel.grid.major.x = element_blank(),
          # panel.grid.minor.x = element_blank(),
            axis.line.x = element_line(color = 'black', linewidth = 3))
```

- Intuitive representation: x-axis shows range of variable values, and dots are data points
- As the idea is to show one dot per observation, may not work well for huge datasets

### Histogram

```{r, fig.alt = 'a histogram (generic and unlabelled, serving as an icon)'}
set.seed(124)
gf_histogram(~TrainingHours, 
             data = mosaic::sample(crime, size = 25, replace = TRUE),
             binwidth = 0.7) |>
  gf_labs(title = 'HISTOGRAM') |>
  gf_theme(#panel.grid.major.y = element_line(color = 'grey70'),
           #panel.grid.major.x = element_blank(),
          # panel.grid.minor.x = element_blank(),
            axis.line.x = element_line(color = 'black', linewidth = 3))
```

- Range of variable values is divided into bins, then height of each bar corresponds to the number of observations in the bin
- Effective way to examine the *shape* of a distribution
- Choosing the number of bins to use is tricky: too many, and the shape is jagged; too few over-smooths (peaks blend together). Not sure? Find a number of bins that is definitely too few, and one that is definitely too many, and then try to settle on an in-between value that best shows the real shape of the distribution without over-smoothing.

### Density Plot

```{r, warning = FALSE, fig.alt = 'a  density plot (generic and unlabelled, serving as an icon)'}
set.seed(124)
gf_density(~TrainingHours, 
           data = mosaic::sample(crime, size = 25, replace = TRUE)) |>
  gf_labs(title = 'DENSITY') |>
  gf_theme(#panel.grid.major.y = element_line(color = 'grey70'),
           #panel.grid.major.x = element_blank(),
          # panel.grid.minor.x = element_blank(),
            axis.line.x = element_line(color = 'black', linewidth = 3))
```


- Like a smoothed version of a histogram (obtained by kernel density estimation, if you want to look up mathematical details)
- Caution: for small datasets, the density plot may show "peaks" that really correspond to one or a few observations
- Can only show *density* (relative frequency of observation), *not counts*

### QQ Plot

```{r, warning= FALSE, fig.alt = 'a quantile-quantile (or QQ) plot (generic and unlabelled, serving as an icon)'}
gf_qq(~TrainingHours, data = crime,
      linewidth = 3) |>
  gf_qqline(color = 'grey50', linetype = 'solid', linewidth = 2) |>
  gf_labs(title = 'Q-Q', x = 'Theoretical', y = 'Data') |>
  gf_theme(axis.line = element_line(color = 'black', linewidth = 3),
           axis.title.x = element_text(),
           axis.title.y = element_text(angle = 90))
```

- "Q-Q Plot" is short for "Quantile-Quantile Plot"
- In some cases, we want to examine the shape of a variable's distribution *to see if it matches a theoretical expectation*. For example: do the regression residuals match a normal distribution? (If that example doesn't make sense to you now - it will later in the course, don't worry.)
- Quantile-quantile plots are one way to make this comparison. They plot the quantiles of the data as a function of the same quantiles of the expected theoretical distribution; if there's a good match, the points should follow a line with slope = 1.
- How close to the straight line is "close enough"? That's the tricky part...

### Check Your Understanding: One-variable plots

::: {.webex-check .webex-box}

```{r results = 'asis'}
#| label: income-postcode

opts <- sample(c(answer = 'Histogram',
        'Lollipop plot',
        'Bar chart'))

cat("Which plot would work best to show the distribution of 75 families' household incomes?",
    longmcq(opts))

opts <- sample(c('Histogram',
        'Density plot',
        'Scatter plot',
        answer = 'Bar chart'))
        
cat("Which plot would work best to show the distribution of 75 families' postal codes?",
    longmcq(opts))
```

:::

`r hide("Click for explanations of solutions above.")`

Lollipop plots and bar graphs work better for categorical variables -- they show counts or proportions (or some other summary of counts in categories). By default, there would be one lollipop or bar for each unique value of income - what a mess! Histograms and density plots, on the other hand, show the distribution of one quantitative variable. (Scatter plots are usually used to show 2 quantitative variables.)

`r unhide()`

## RELATIONSHIPS 
Very often, we want to examine *relationships* between variables, not individual variables' distributions. This means thinking carefully about what types of variables are in the (potential) relationship, and how we can best show their values graphically.

## Gallery: 2-3 Cat.


```{r, fig.alt = 'a side-by-side bar graph (generic and unlabelled, serving as an icon)'}
gf_bar(~Location, fill = ~DressCode,
       position = 'dodge',
       data = crime) |>
  gf_labs(title = 'SIDE-BY-SIDE BAR') |>
  gf_theme(legend.position = 'none') |>
  gf_theme(scale_fill_brewer(palette = 'Greys'))
```


- One set of bars per "category", colored by "groups" -- shows *two* categorical variables at once
- Good for showing *counts* in each combination of categories/groups
- It is hard to compare proportion in each group across categories, if the total number in each category differs.

### Stacked Bar Graph

```{r, stacked-bar, fig.alt = 'a stacked bar chart (generic and unlabelled, serving as an icon)'}
gf_bar(~Location, fill = ~DressCode,
       position = 'stack',
       data = crime) |>
  gf_labs(title = 'STACKED BAR') |>
  gf_theme(legend.position = 'none') |>
  gf_theme(scale_fill_brewer(palette = 'Greys'))
```



- Similar to side-by-side bar
- Compared to side-by-side, it's *harder* to compare proportions in each group within a category, but *easier* to estimate the proportion in each category.

### Faceted Bar Graph

```{r, facet-bar, fig.alt = 'a faceted bar chart (generic and unlabelled, serving as an icon)'}
gf_props(~Location | DressCode,
       data = crime,
       denom = ~PANEL) |>
  gf_labs(title = 'FACETED BAR') |>
  gf_theme(legend.position = 'none',
           strip.text.x = element_blank(),
           panel.border = element_rect(fill = NA, linewidth = 2)) |>
  gf_theme(scale_fill_brewer(palette = 'Greys'))
```


- One plot box -- usually called a "panel" or "facet" -- for each of a set of groups
- Think carefully about the question of interest and the relationship you want to highlight as you choose: should bar heights correspond to... 
  - Number of observations?
  - Proportion of observations *overall in the whole dataset*?
  - Proportion of observations *in the panel*?
  - Something else?
  
### Combinations (Stacked bars + Facets, etc.)
Of course, if you have 3 variables instead of just two, you *can* combine methods. Avoid it unless you are sure it is necessary and communicates clearly.

- **Be sure that the resulting graph is not too complex to understand quickly, at a glance.** Packing too much information into one graph sometimes means *none* of the info is actually communicated!
- And if showing proportions or percentages in such a display, **be sure you understand what denominator is being used in the calculations** -- is it the fraction of the whole dataset, within facets, etc.?

```{r, stacked-and-facetted-bar, fig.width = 9, fig.alt = 'a bar chart with stacked bars plus facets (generic and unlabelled, serving as an icon)' }
gf_props(~Location | DressCode,
         fill = ~StudentIDBadges,
       data = crime,
       denom = ~PANEL) |>
  gf_labs(title = 'STACKED BAR + FACETS') |>
  gf_theme(legend.position = 'none',
           strip.text.x = element_blank(),
           panel.border = element_rect(fill = NA, linewidth = 2)) |>
  gf_theme(scale_fill_brewer(palette = 'Greys'))
```




```{r, side-by-side-and-facetted-bar, fig.width = 9, fig.alt = 'a bar chart with side-by-side bars plus facets (generic and unlabelled, serving as an icon)' }
gf_props(~Location | DressCode,
         fill = ~StudentIDBadges,
         position = 'dodge',
       data = crime,
       denom = ~PANEL) |>
  gf_labs(title = 'SIDE-BY-SIDE + FACETS') |>
  gf_theme(legend.position = 'none',
           strip.text.x = element_blank(),
           panel.border = element_rect(fill = NA, linewidth = 2)) |>
  gf_theme(scale_fill_brewer(palette = 'Greys'))
```




## Gallery: 2-3 Quant.


```{r, scatter, fig.alt = 'a scatter plot (generic and unlabelled, serving as an icon)' }
gf_point(ViolentIncidentsTotal ~ NEnrollment, 
         data = mosaic::sample(crime, size = 100, replace = TRUE),
         size = 3) |>
  gf_labs(title = 'SCATTER', x = '', y = '') |>
  gf_theme(axis.line = element_line(color = 'black', linewidth = 3))
```




- A scatterplot is the default for visualizing the relationship between two quantitative variables
- Be sure you actually have *two quantitative variables*! If not, another plot may be a better option

### Line Plot


```{r, scatter-line, fig.alt = 'a line plot (generic and unlabelled, serving as an icon)' }
d <- data.frame(t = 1:60)
d <- d |> mutate(y = 50 + 0.75*t + rnorm(60, 0, 5))

gf_line(y ~ t, 
         data = d,
         linewidth = 3) |>
  gf_labs(title = 'LINE', x = '', y = '') |>
  gf_theme(axis.line = element_line(color = 'black', linewidth = 3))
```




- If the x-axis variable is **Time** (or it otherwise makes sense to join the dots), a line can replace the dots, or be added to them
- Make sure connecting the dots makes sense in context and does not guide the eye to incorrect interpretations (for example, emphasizing outliers)


### Adding More Quant. Variables

What if you have three or four quantitative variables whose relationships you're curious about?

*Proceed with caution!*  

It's possible to include 3+ variables on one plot, but ideally **it should still be interpretable at a glance:**

- What is the main point of the figure? Is it possible to make the point without showing all 3+ variables together?
- Keep things as simple as you can while still telling the story you want to tell.

### Scatter + Size

```{r, scatter-with-size, fig.alt = 'a scatter plot with point size representing a third variable (generic and unlabelled, serving as an icon)' }
set.seed(44)
gf_point(log(AttacksWithoutWeapon) ~ log(Vandalism), size = ~NEnrollment, 
         data = mosaic::sample(crime, size = 100, replace = TRUE)) |>
  gf_labs(title = 'SCATTER + SIZE', x = '', y = '') |>
  gf_theme(legend.position = 'none',
           axis.line = element_line(color = 'black', linewidth = 3))
```




- You can adjust the size of each dot in a scatter plot to correspond to the value of a third variable
- This is especially useful when the third variable measures the size of the population being represented -- for example, a scatter plot of life expectancy vs income for many countries, with point size indicating population of each country

## Gallery: Mixed Quant. + Cat.
There are several plots designed specifically to look at the distribution of a quantitative variable, grouped by a categorical variable.

### Boxplots

```{r, boxplot, fig.alt = 'a boxplot (generic and unlabelled, serving as an icon)' }
gf_boxplot(NEnrollment ~ Location, data = crime) |>
  gf_labs(title = "BOXPLOTS")
```

```{r, boxplot-horiz, fig.alt = 'a horizontally-oriented boxplot (generic and unlabelled, serving as an icon)' }
gf_boxplot(NEnrollment ~ Location, data = crime) |>
  gf_refine(coord_flip()) |>
  gf_labs(title = "BOXPLOTS (HORIZONTAL)")
```

- The boxplot shows a *summary* of the distribution. The box spans the middle half of the data, with the line marking the median. The "whisker" lines extend to cover the range of "most of" the data, with outliers shown individually
- For details, check out [this optional explanation of how boxplots are constructed](https://openintro-ims.netlify.app/explore-numerical.html#boxplots){target="_blank"} from [Introduction to Modern Statistics](https://openintro-ims.netlify.app/index.html){target="_blank"} by Mine Çetinkaya-Rundel and Johanna Hardin.
- If your dataset is too small to estimate the median and quartiles of the data accurately, consider showing all the observations (for example, using or overlaying a jitter plot) 

### Violin Plots

```{r, violin, fig.alt = 'a violin plot (generic and unlabelled, serving as an icon)' }
gf_violin(TrainingHours ~ Enrollment, data = crime) |>
  gf_labs(title = "VIOLIN PLOTS")
```

```{r, violin-horiz, fig.alt = 'a horisontally-oriented violion plot (generic and unlabelled, serving as an icon)' }
gf_violin(TrainingHours ~ Enrollment, data = crime) |>
  gf_refine(coord_flip()) |>
  gf_labs(title = "VIOLIN (HORIZONTAL)")
```

- These show a mirrored density plot for each group
- As for density plots, make sure you have a large enough dataset so that the bumps in the density curve don't represent just one or a couple of observations

### Jitter Plots

```{r, jitter, fig.alt = 'a jitter plot (generic and unlabelled, serving as an icon)' }
gf_jitter(TrainingHours ~ Enrollment, data = crime) |>
  gf_labs(title = "JITTER PLOTS")
```

- These show all the points in every category, "jittered" (moved slightly away from the category axis) to reduce overplotting
- If the dataset is too large, overplotting may still be a big problem
- Jitter plots are often used as an additional layer on top of boxplots or violin plots to make the size of the dataset, and the locations of individual datapoints, more visible

### Sina Plots

```{r, sina, fig.alt = 'a sina plot (generic and unlabelled, serving as an icon)' }
gf_sina(TrainingHours ~ Enrollment, data = crime) |>
  gf_labs(title = "SINA PLOTS")
```

- These show all the points in every category, arranged so that the width of the point cloud corresponds to the density of observations
- If the dataset is too large, overplotting may become an issue
- A sina plot is a bit of a hybrid between a violin plot and a jitter plot; or, a more organized, less random version of a jitter plot.

### Facets?
You can also consider making multi-panel plots with one histogram, density plot, or dotplot per facet, but comparing between facets is usually harder than comparing boxplots or violin plots on a single axis.

### Check Your Understanding: Quant. + Cat.

**There are some errors and inconsistencies in the chart below!**

![chart choice infographic](https://activewizards.com/content/blog/How_to_Choose_the_Right_Chart_Type_[Infographic]/chart-types-infographics04.png){width=600px}